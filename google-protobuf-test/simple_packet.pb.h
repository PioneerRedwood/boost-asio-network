// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simple_packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_simple_5fpacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_simple_5fpacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_simple_5fpacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_simple_5fpacket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_simple_5fpacket_2eproto;
namespace rednet {
class SimplePacket;
struct SimplePacketDefaultTypeInternal;
extern SimplePacketDefaultTypeInternal _SimplePacket_default_instance_;
class SimplePacket_State;
struct SimplePacket_StateDefaultTypeInternal;
extern SimplePacket_StateDefaultTypeInternal _SimplePacket_State_default_instance_;
}  // namespace rednet
PROTOBUF_NAMESPACE_OPEN
template<> ::rednet::SimplePacket* Arena::CreateMaybeMessage<::rednet::SimplePacket>(Arena*);
template<> ::rednet::SimplePacket_State* Arena::CreateMaybeMessage<::rednet::SimplePacket_State>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rednet {

enum SimplePacket_State_StateType : int {
  SimplePacket_State_StateType_NONE = 0,
  SimplePacket_State_StateType_ALIVE = 1,
  SimplePacket_State_StateType_DEAD = 2
};
bool SimplePacket_State_StateType_IsValid(int value);
constexpr SimplePacket_State_StateType SimplePacket_State_StateType_StateType_MIN = SimplePacket_State_StateType_NONE;
constexpr SimplePacket_State_StateType SimplePacket_State_StateType_StateType_MAX = SimplePacket_State_StateType_DEAD;
constexpr int SimplePacket_State_StateType_StateType_ARRAYSIZE = SimplePacket_State_StateType_StateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SimplePacket_State_StateType_descriptor();
template<typename T>
inline const std::string& SimplePacket_State_StateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SimplePacket_State_StateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SimplePacket_State_StateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SimplePacket_State_StateType_descriptor(), enum_t_value);
}
inline bool SimplePacket_State_StateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SimplePacket_State_StateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SimplePacket_State_StateType>(
    SimplePacket_State_StateType_descriptor(), name, value);
}
enum SimplePacket_ObjectType : int {
  SimplePacket_ObjectType_TERRRAIN = 0,
  SimplePacket_ObjectType_ITEM = 1,
  SimplePacket_ObjectType_MONSTER = 2,
  SimplePacket_ObjectType_PLAYER = 3,
  SimplePacket_ObjectType_NPC = 4,
  SimplePacket_ObjectType_AURA = 5
};
bool SimplePacket_ObjectType_IsValid(int value);
constexpr SimplePacket_ObjectType SimplePacket_ObjectType_ObjectType_MIN = SimplePacket_ObjectType_TERRRAIN;
constexpr SimplePacket_ObjectType SimplePacket_ObjectType_ObjectType_MAX = SimplePacket_ObjectType_AURA;
constexpr int SimplePacket_ObjectType_ObjectType_ARRAYSIZE = SimplePacket_ObjectType_ObjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SimplePacket_ObjectType_descriptor();
template<typename T>
inline const std::string& SimplePacket_ObjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SimplePacket_ObjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SimplePacket_ObjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SimplePacket_ObjectType_descriptor(), enum_t_value);
}
inline bool SimplePacket_ObjectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SimplePacket_ObjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SimplePacket_ObjectType>(
    SimplePacket_ObjectType_descriptor(), name, value);
}
enum SimplePacket_UpdateType : int {
  SimplePacket_UpdateType_FIXED = 0,
  SimplePacket_UpdateType_DYNAMIC = 1,
  SimplePacket_UpdateType_LATE = 2
};
bool SimplePacket_UpdateType_IsValid(int value);
constexpr SimplePacket_UpdateType SimplePacket_UpdateType_UpdateType_MIN = SimplePacket_UpdateType_FIXED;
constexpr SimplePacket_UpdateType SimplePacket_UpdateType_UpdateType_MAX = SimplePacket_UpdateType_LATE;
constexpr int SimplePacket_UpdateType_UpdateType_ARRAYSIZE = SimplePacket_UpdateType_UpdateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SimplePacket_UpdateType_descriptor();
template<typename T>
inline const std::string& SimplePacket_UpdateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SimplePacket_UpdateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SimplePacket_UpdateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SimplePacket_UpdateType_descriptor(), enum_t_value);
}
inline bool SimplePacket_UpdateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SimplePacket_UpdateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SimplePacket_UpdateType>(
    SimplePacket_UpdateType_descriptor(), name, value);
}
// ===================================================================

class SimplePacket_State final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rednet.SimplePacket.State) */ {
 public:
  inline SimplePacket_State() : SimplePacket_State(nullptr) {}
  ~SimplePacket_State() override;
  explicit constexpr SimplePacket_State(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimplePacket_State(const SimplePacket_State& from);
  SimplePacket_State(SimplePacket_State&& from) noexcept
    : SimplePacket_State() {
    *this = ::std::move(from);
  }

  inline SimplePacket_State& operator=(const SimplePacket_State& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimplePacket_State& operator=(SimplePacket_State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimplePacket_State& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimplePacket_State* internal_default_instance() {
    return reinterpret_cast<const SimplePacket_State*>(
               &_SimplePacket_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SimplePacket_State& a, SimplePacket_State& b) {
    a.Swap(&b);
  }
  inline void Swap(SimplePacket_State* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimplePacket_State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimplePacket_State* New() const final {
    return new SimplePacket_State();
  }

  SimplePacket_State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimplePacket_State>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimplePacket_State& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimplePacket_State& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimplePacket_State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rednet.SimplePacket.State";
  }
  protected:
  explicit SimplePacket_State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SimplePacket_State_StateType StateType;
  static constexpr StateType NONE =
    SimplePacket_State_StateType_NONE;
  static constexpr StateType ALIVE =
    SimplePacket_State_StateType_ALIVE;
  static constexpr StateType DEAD =
    SimplePacket_State_StateType_DEAD;
  static inline bool StateType_IsValid(int value) {
    return SimplePacket_State_StateType_IsValid(value);
  }
  static constexpr StateType StateType_MIN =
    SimplePacket_State_StateType_StateType_MIN;
  static constexpr StateType StateType_MAX =
    SimplePacket_State_StateType_StateType_MAX;
  static constexpr int StateType_ARRAYSIZE =
    SimplePacket_State_StateType_StateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StateType_descriptor() {
    return SimplePacket_State_StateType_descriptor();
  }
  template<typename T>
  static inline const std::string& StateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StateType_Name.");
    return SimplePacket_State_StateType_Name(enum_t_value);
  }
  static inline bool StateType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StateType* value) {
    return SimplePacket_State_StateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChangedTimeFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // required string changed_time = 2;
  bool has_changed_time() const;
  private:
  bool _internal_has_changed_time() const;
  public:
  void clear_changed_time();
  const std::string& changed_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_changed_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_changed_time();
  PROTOBUF_MUST_USE_RESULT std::string* release_changed_time();
  void set_allocated_changed_time(std::string* changed_time);
  private:
  const std::string& _internal_changed_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_changed_time(const std::string& value);
  std::string* _internal_mutable_changed_time();
  public:

  // required .rednet.SimplePacket.State.StateType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::rednet::SimplePacket_State_StateType type() const;
  void set_type(::rednet::SimplePacket_State_StateType value);
  private:
  ::rednet::SimplePacket_State_StateType _internal_type() const;
  void _internal_set_type(::rednet::SimplePacket_State_StateType value);
  public:

  // @@protoc_insertion_point(class_scope:rednet.SimplePacket.State)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr changed_time_;
  int type_;
  friend struct ::TableStruct_simple_5fpacket_2eproto;
};
// -------------------------------------------------------------------

class SimplePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rednet.SimplePacket) */ {
 public:
  inline SimplePacket() : SimplePacket(nullptr) {}
  ~SimplePacket() override;
  explicit constexpr SimplePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimplePacket(const SimplePacket& from);
  SimplePacket(SimplePacket&& from) noexcept
    : SimplePacket() {
    *this = ::std::move(from);
  }

  inline SimplePacket& operator=(const SimplePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimplePacket& operator=(SimplePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimplePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimplePacket* internal_default_instance() {
    return reinterpret_cast<const SimplePacket*>(
               &_SimplePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SimplePacket& a, SimplePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(SimplePacket* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimplePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimplePacket* New() const final {
    return new SimplePacket();
  }

  SimplePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimplePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimplePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimplePacket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimplePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rednet.SimplePacket";
  }
  protected:
  explicit SimplePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SimplePacket_State State;

  typedef SimplePacket_ObjectType ObjectType;
  static constexpr ObjectType TERRRAIN =
    SimplePacket_ObjectType_TERRRAIN;
  static constexpr ObjectType ITEM =
    SimplePacket_ObjectType_ITEM;
  static constexpr ObjectType MONSTER =
    SimplePacket_ObjectType_MONSTER;
  static constexpr ObjectType PLAYER =
    SimplePacket_ObjectType_PLAYER;
  static constexpr ObjectType NPC =
    SimplePacket_ObjectType_NPC;
  static constexpr ObjectType AURA =
    SimplePacket_ObjectType_AURA;
  static inline bool ObjectType_IsValid(int value) {
    return SimplePacket_ObjectType_IsValid(value);
  }
  static constexpr ObjectType ObjectType_MIN =
    SimplePacket_ObjectType_ObjectType_MIN;
  static constexpr ObjectType ObjectType_MAX =
    SimplePacket_ObjectType_ObjectType_MAX;
  static constexpr int ObjectType_ARRAYSIZE =
    SimplePacket_ObjectType_ObjectType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ObjectType_descriptor() {
    return SimplePacket_ObjectType_descriptor();
  }
  template<typename T>
  static inline const std::string& ObjectType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ObjectType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ObjectType_Name.");
    return SimplePacket_ObjectType_Name(enum_t_value);
  }
  static inline bool ObjectType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ObjectType* value) {
    return SimplePacket_ObjectType_Parse(name, value);
  }

  typedef SimplePacket_UpdateType UpdateType;
  static constexpr UpdateType FIXED =
    SimplePacket_UpdateType_FIXED;
  static constexpr UpdateType DYNAMIC =
    SimplePacket_UpdateType_DYNAMIC;
  static constexpr UpdateType LATE =
    SimplePacket_UpdateType_LATE;
  static inline bool UpdateType_IsValid(int value) {
    return SimplePacket_UpdateType_IsValid(value);
  }
  static constexpr UpdateType UpdateType_MIN =
    SimplePacket_UpdateType_UpdateType_MIN;
  static constexpr UpdateType UpdateType_MAX =
    SimplePacket_UpdateType_UpdateType_MAX;
  static constexpr int UpdateType_ARRAYSIZE =
    SimplePacket_UpdateType_UpdateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UpdateType_descriptor() {
    return SimplePacket_UpdateType_descriptor();
  }
  template<typename T>
  static inline const std::string& UpdateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UpdateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UpdateType_Name.");
    return SimplePacket_UpdateType_Name(enum_t_value);
  }
  static inline bool UpdateType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UpdateType* value) {
    return SimplePacket_UpdateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNowTimeFieldNumber = 2,
    kStateFieldNumber = 5,
    kIdFieldNumber = 1,
    kObjectTypeFieldNumber = 3,
    kUpdateTypeFieldNumber = 4,
  };
  // required string now_time = 2;
  bool has_now_time() const;
  private:
  bool _internal_has_now_time() const;
  public:
  void clear_now_time();
  const std::string& now_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_now_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_now_time();
  PROTOBUF_MUST_USE_RESULT std::string* release_now_time();
  void set_allocated_now_time(std::string* now_time);
  private:
  const std::string& _internal_now_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_now_time(const std::string& value);
  std::string* _internal_mutable_now_time();
  public:

  // required .rednet.SimplePacket.State state = 5;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::rednet::SimplePacket_State& state() const;
  PROTOBUF_MUST_USE_RESULT ::rednet::SimplePacket_State* release_state();
  ::rednet::SimplePacket_State* mutable_state();
  void set_allocated_state(::rednet::SimplePacket_State* state);
  private:
  const ::rednet::SimplePacket_State& _internal_state() const;
  ::rednet::SimplePacket_State* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::rednet::SimplePacket_State* state);
  ::rednet::SimplePacket_State* unsafe_arena_release_state();

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .rednet.SimplePacket.ObjectType object_type = 3;
  bool has_object_type() const;
  private:
  bool _internal_has_object_type() const;
  public:
  void clear_object_type();
  ::rednet::SimplePacket_ObjectType object_type() const;
  void set_object_type(::rednet::SimplePacket_ObjectType value);
  private:
  ::rednet::SimplePacket_ObjectType _internal_object_type() const;
  void _internal_set_object_type(::rednet::SimplePacket_ObjectType value);
  public:

  // required .rednet.SimplePacket.UpdateType update_type = 4;
  bool has_update_type() const;
  private:
  bool _internal_has_update_type() const;
  public:
  void clear_update_type();
  ::rednet::SimplePacket_UpdateType update_type() const;
  void set_update_type(::rednet::SimplePacket_UpdateType value);
  private:
  ::rednet::SimplePacket_UpdateType _internal_update_type() const;
  void _internal_set_update_type(::rednet::SimplePacket_UpdateType value);
  public:

  // @@protoc_insertion_point(class_scope:rednet.SimplePacket)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr now_time_;
  ::rednet::SimplePacket_State* state_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int object_type_;
  int update_type_;
  friend struct ::TableStruct_simple_5fpacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimplePacket_State

// required .rednet.SimplePacket.State.StateType type = 1;
inline bool SimplePacket_State::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SimplePacket_State::has_type() const {
  return _internal_has_type();
}
inline void SimplePacket_State::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::rednet::SimplePacket_State_StateType SimplePacket_State::_internal_type() const {
  return static_cast< ::rednet::SimplePacket_State_StateType >(type_);
}
inline ::rednet::SimplePacket_State_StateType SimplePacket_State::type() const {
  // @@protoc_insertion_point(field_get:rednet.SimplePacket.State.type)
  return _internal_type();
}
inline void SimplePacket_State::_internal_set_type(::rednet::SimplePacket_State_StateType value) {
  assert(::rednet::SimplePacket_State_StateType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void SimplePacket_State::set_type(::rednet::SimplePacket_State_StateType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:rednet.SimplePacket.State.type)
}

// required string changed_time = 2;
inline bool SimplePacket_State::_internal_has_changed_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SimplePacket_State::has_changed_time() const {
  return _internal_has_changed_time();
}
inline void SimplePacket_State::clear_changed_time() {
  changed_time_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SimplePacket_State::changed_time() const {
  // @@protoc_insertion_point(field_get:rednet.SimplePacket.State.changed_time)
  return _internal_changed_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimplePacket_State::set_changed_time(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 changed_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rednet.SimplePacket.State.changed_time)
}
inline std::string* SimplePacket_State::mutable_changed_time() {
  std::string* _s = _internal_mutable_changed_time();
  // @@protoc_insertion_point(field_mutable:rednet.SimplePacket.State.changed_time)
  return _s;
}
inline const std::string& SimplePacket_State::_internal_changed_time() const {
  return changed_time_.Get();
}
inline void SimplePacket_State::_internal_set_changed_time(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  changed_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimplePacket_State::_internal_mutable_changed_time() {
  _has_bits_[0] |= 0x00000001u;
  return changed_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimplePacket_State::release_changed_time() {
  // @@protoc_insertion_point(field_release:rednet.SimplePacket.State.changed_time)
  if (!_internal_has_changed_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return changed_time_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimplePacket_State::set_allocated_changed_time(std::string* changed_time) {
  if (changed_time != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  changed_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), changed_time,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:rednet.SimplePacket.State.changed_time)
}

// -------------------------------------------------------------------

// SimplePacket

// required int32 id = 1;
inline bool SimplePacket::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SimplePacket::has_id() const {
  return _internal_has_id();
}
inline void SimplePacket::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimplePacket::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimplePacket::id() const {
  // @@protoc_insertion_point(field_get:rednet.SimplePacket.id)
  return _internal_id();
}
inline void SimplePacket::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void SimplePacket::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:rednet.SimplePacket.id)
}

// required string now_time = 2;
inline bool SimplePacket::_internal_has_now_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SimplePacket::has_now_time() const {
  return _internal_has_now_time();
}
inline void SimplePacket::clear_now_time() {
  now_time_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SimplePacket::now_time() const {
  // @@protoc_insertion_point(field_get:rednet.SimplePacket.now_time)
  return _internal_now_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimplePacket::set_now_time(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 now_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rednet.SimplePacket.now_time)
}
inline std::string* SimplePacket::mutable_now_time() {
  std::string* _s = _internal_mutable_now_time();
  // @@protoc_insertion_point(field_mutable:rednet.SimplePacket.now_time)
  return _s;
}
inline const std::string& SimplePacket::_internal_now_time() const {
  return now_time_.Get();
}
inline void SimplePacket::_internal_set_now_time(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  now_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimplePacket::_internal_mutable_now_time() {
  _has_bits_[0] |= 0x00000001u;
  return now_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimplePacket::release_now_time() {
  // @@protoc_insertion_point(field_release:rednet.SimplePacket.now_time)
  if (!_internal_has_now_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return now_time_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimplePacket::set_allocated_now_time(std::string* now_time) {
  if (now_time != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  now_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), now_time,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:rednet.SimplePacket.now_time)
}

// required .rednet.SimplePacket.ObjectType object_type = 3;
inline bool SimplePacket::_internal_has_object_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SimplePacket::has_object_type() const {
  return _internal_has_object_type();
}
inline void SimplePacket::clear_object_type() {
  object_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::rednet::SimplePacket_ObjectType SimplePacket::_internal_object_type() const {
  return static_cast< ::rednet::SimplePacket_ObjectType >(object_type_);
}
inline ::rednet::SimplePacket_ObjectType SimplePacket::object_type() const {
  // @@protoc_insertion_point(field_get:rednet.SimplePacket.object_type)
  return _internal_object_type();
}
inline void SimplePacket::_internal_set_object_type(::rednet::SimplePacket_ObjectType value) {
  assert(::rednet::SimplePacket_ObjectType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  object_type_ = value;
}
inline void SimplePacket::set_object_type(::rednet::SimplePacket_ObjectType value) {
  _internal_set_object_type(value);
  // @@protoc_insertion_point(field_set:rednet.SimplePacket.object_type)
}

// required .rednet.SimplePacket.UpdateType update_type = 4;
inline bool SimplePacket::_internal_has_update_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SimplePacket::has_update_type() const {
  return _internal_has_update_type();
}
inline void SimplePacket::clear_update_type() {
  update_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::rednet::SimplePacket_UpdateType SimplePacket::_internal_update_type() const {
  return static_cast< ::rednet::SimplePacket_UpdateType >(update_type_);
}
inline ::rednet::SimplePacket_UpdateType SimplePacket::update_type() const {
  // @@protoc_insertion_point(field_get:rednet.SimplePacket.update_type)
  return _internal_update_type();
}
inline void SimplePacket::_internal_set_update_type(::rednet::SimplePacket_UpdateType value) {
  assert(::rednet::SimplePacket_UpdateType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  update_type_ = value;
}
inline void SimplePacket::set_update_type(::rednet::SimplePacket_UpdateType value) {
  _internal_set_update_type(value);
  // @@protoc_insertion_point(field_set:rednet.SimplePacket.update_type)
}

// required .rednet.SimplePacket.State state = 5;
inline bool SimplePacket::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || state_ != nullptr);
  return value;
}
inline bool SimplePacket::has_state() const {
  return _internal_has_state();
}
inline void SimplePacket::clear_state() {
  if (state_ != nullptr) state_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::rednet::SimplePacket_State& SimplePacket::_internal_state() const {
  const ::rednet::SimplePacket_State* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::rednet::SimplePacket_State&>(
      ::rednet::_SimplePacket_State_default_instance_);
}
inline const ::rednet::SimplePacket_State& SimplePacket::state() const {
  // @@protoc_insertion_point(field_get:rednet.SimplePacket.state)
  return _internal_state();
}
inline void SimplePacket::unsafe_arena_set_allocated_state(
    ::rednet::SimplePacket_State* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rednet.SimplePacket.state)
}
inline ::rednet::SimplePacket_State* SimplePacket::release_state() {
  _has_bits_[0] &= ~0x00000002u;
  ::rednet::SimplePacket_State* temp = state_;
  state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rednet::SimplePacket_State* SimplePacket::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:rednet.SimplePacket.state)
  _has_bits_[0] &= ~0x00000002u;
  ::rednet::SimplePacket_State* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::rednet::SimplePacket_State* SimplePacket::_internal_mutable_state() {
  _has_bits_[0] |= 0x00000002u;
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::rednet::SimplePacket_State>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::rednet::SimplePacket_State* SimplePacket::mutable_state() {
  ::rednet::SimplePacket_State* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:rednet.SimplePacket.state)
  return _msg;
}
inline void SimplePacket::set_allocated_state(::rednet::SimplePacket_State* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rednet::SimplePacket_State>::GetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:rednet.SimplePacket.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rednet

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::rednet::SimplePacket_State_StateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rednet::SimplePacket_State_StateType>() {
  return ::rednet::SimplePacket_State_StateType_descriptor();
}
template <> struct is_proto_enum< ::rednet::SimplePacket_ObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rednet::SimplePacket_ObjectType>() {
  return ::rednet::SimplePacket_ObjectType_descriptor();
}
template <> struct is_proto_enum< ::rednet::SimplePacket_UpdateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rednet::SimplePacket_UpdateType>() {
  return ::rednet::SimplePacket_UpdateType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_simple_5fpacket_2eproto
